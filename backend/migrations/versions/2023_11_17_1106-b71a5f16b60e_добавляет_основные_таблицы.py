"""Добавляет основные таблицы

Revision ID: b71a5f16b60e
Revises: 
Create Date: 2023-11-17 11:06:28.938025

"""
from typing import Sequence, Union

import fastapi_users_db_sqlalchemy
import sqlalchemy_utils
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b71a5f16b60e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('Employee', 'Tutor', 'HR', name='user_roles').create(op.get_bind())
    sa.Enum('SingleChoice', 'MultipleChoice', name='question_types').create(op.get_bind())
    sa.Enum('NotViewed', 'Viewed', 'Submitted', 'Finished', name='task_states').create(op.get_bind())
    sa.Enum('Test', name='task_types').create(op.get_bind())
    sa.Enum('NotViewed', 'Viewed', 'Completed', name='level_states').create(op.get_bind())
    op.create_table('answers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('question_id', sa.UUID(), nullable=False),
    sa.Column('content', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('image_proofs',
    sa.Column('proof_id', sa.UUID(), nullable=False),
    sa.Column('image_url', sqlalchemy_utils.types.url.URLType(), nullable=False),
    sa.PrimaryKeyConstraint('proof_id', 'image_url')
    )
    op.create_table('maps',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('proofs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('employee_id', sa.UUID(), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('questions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('type', postgresql.ENUM('SingleChoice', 'MultipleChoice', name='question_types', create_type=False), nullable=False),
    sa.Column('question', sa.String(), nullable=False),
    sa.Column('correct_answer_id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('type', postgresql.ENUM('Test', name='task_types', create_type=False), nullable=False),
    sa.Column('requires_review', sa.Boolean(), nullable=False),
    sa.Column('score_reward', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('theory_blocks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('theme', sa.String(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tutors',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('last_name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('role', postgresql.ENUM('Employee', 'Tutor', 'HR', name='user_roles', create_type=False), nullable=False),
    sa.Column('registered_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False),
    sa.Column('email', sa.String(length=320), nullable=False),
    sa.Column('hashed_password', sa.String(length=1024), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('video_proofs',
    sa.Column('proof_id', sa.UUID(), nullable=False),
    sa.Column('video_url', sqlalchemy_utils.types.url.URLType(), nullable=False),
    sa.PrimaryKeyConstraint('proof_id', 'video_url')
    )
    op.create_table('employees',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tutor_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('last_name', sa.String(length=255), nullable=False),
    sa.Column('hired_at', sa.Date(), server_default=sa.text('CURRENT_DATE'), nullable=False),
    sa.ForeignKeyConstraint(['tutor_id'], ['tutors.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('modules',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('previous_module_id', sa.UUID(), nullable=False),
    sa.Column('next_module_id', sa.UUID(), nullable=False),
    sa.Column('map_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['map_id'], ['maps.id'], ),
    sa.ForeignKeyConstraint(['next_module_id'], ['modules.id'], ),
    sa.ForeignKeyConstraint(['previous_module_id'], ['modules.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('theory_videos',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('theory_id', sa.UUID(), nullable=False),
    sa.Column('url', sqlalchemy_utils.types.url.URLType(), nullable=False),
    sa.ForeignKeyConstraint(['theory_id'], ['theory_blocks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('levels',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('module_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['modules.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('task_employees',
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('employee_id', sa.UUID(), nullable=False),
    sa.Column('state', postgresql.ENUM('NotViewed', 'Viewed', 'Submitted', 'Finished', name='task_states', create_type=False), nullable=False),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ),
    sa.PrimaryKeyConstraint('task_id', 'employee_id')
    )
    op.create_table('level_employees',
    sa.Column('level_id', sa.UUID(), nullable=False),
    sa.Column('employee_id', sa.UUID(), nullable=False),
    sa.Column('state', postgresql.ENUM('NotViewed', 'Viewed', 'Completed', name='level_states', create_type=False), nullable=False),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], ),
    sa.ForeignKeyConstraint(['level_id'], ['levels.id'], ),
    sa.PrimaryKeyConstraint('level_id', 'employee_id')
    )
    op.create_table('level_tasks',
    sa.Column('level_id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['level_id'], ['levels.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ),
    sa.PrimaryKeyConstraint('level_id', 'task_id')
    )
    op.create_table('level_theory_blocks',
    sa.Column('level_id', sa.UUID(), nullable=False),
    sa.Column('theory_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['level_id'], ['levels.id'], ),
    sa.ForeignKeyConstraint(['theory_id'], ['theory_blocks.id'], ),
    sa.PrimaryKeyConstraint('level_id', 'theory_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('level_theory_blocks')
    op.drop_table('level_tasks')
    op.drop_table('level_employees')
    op.drop_table('task_employees')
    op.drop_table('levels')
    op.drop_table('theory_videos')
    op.drop_table('modules')
    op.drop_table('employees')
    op.drop_table('video_proofs')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('tutors')
    op.drop_table('theory_blocks')
    op.drop_table('tasks')
    op.drop_table('questions')
    op.drop_table('proofs')
    op.drop_table('maps')
    op.drop_table('image_proofs')
    op.drop_table('answers')
    sa.Enum('NotViewed', 'Viewed', 'Completed', name='level_states').drop(op.get_bind())
    sa.Enum('Test', name='task_types').drop(op.get_bind())
    sa.Enum('NotViewed', 'Viewed', 'Submitted', 'Finished', name='task_states').drop(op.get_bind())
    sa.Enum('SingleChoice', 'MultipleChoice', name='question_types').drop(op.get_bind())
    sa.Enum('Employee', 'Tutor', 'HR', name='user_roles').drop(op.get_bind())
    # ### end Alembic commands ###
